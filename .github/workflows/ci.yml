name: FINSIGHT CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker images
        run: |
          docker compose build

      - name: Start services
        run: |
          docker compose up -d
          sleep 30  # Wait for services to be ready

      - name: Ingest data
        run: |
          curl -f http://localhost:8000/ingest/AAPL || exit 1
          curl -f http://localhost:8001/analyze/AAPL || exit 1

      - name: Set up Selenium and Chrome
        run: |
          sudo apt-get update
          sudo apt-get install -y chromium-browser chromium-chromedriver
          pip install selenium

      - name: Run headless browser test
        run: |
          python -c "from selenium import webdriver
          from selenium.webdriver.common.by import By
          from selenium.webdriver.chrome.options import Options
          from selenium.webdriver.support.ui import WebDriverWait
          from selenium.webdriver.support import expected_conditions as EC
          options = Options()
          options.add_argument('--headless')
          options.add_argument('--no-sandbox')
          options.add_argument('--disable-dev-shm-usage')
          driver = webdriver.Chrome(options=options)
          driver.get('http://localhost:5173')
          WebDriverWait(driver, 30).until(EC.presence_of_element_located((By.TAG_NAME, 'input'))).send_keys('AAPL')
          WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.TAG_NAME, 'button'))).click()
          WebDriverWait(driver, 30).until(lambda d: len(d.find_elements(By.TAG_NAME, 'canvas')) >= 2)
          print('Graphs visible')
          prediction = driver.find_element(By.ID, 'stock-data').text.split(' ')[2]
          print(f'Predicted closing price: {prediction}')
          driver.quit()"

      - name: Stop services
        if: always()  # Runs even if previous steps fail
        run: |
          docker-compose down